{
    "collab_server" : "",
    "contents" : "data(\"AirPassengers\")\nap <- AirPassengers\nhead(ap)\nclass(ap)\nstart(ap) ; end(ap)\nfrequency(ap)\ncycle(ap)\n\nplot(ap)\nabline(reg=lm(AirPassengers~time(AirPassengers)))\n# data is not stationary  here as both mean and variance are changing\n\nplot(aggregate(ap)) #plots mean of each month\n\nboxplot(ap~cycle(ap))\n\nplot(decompose(ap))\ndec = decompose(ap)\n\nnames(dec)\ndec$seasonal\ndec$random\n\n#dickey-fuller test\nlibrary(tseries)\nadf.test(diff(log(AirPassengers)),alternative = \"stationary\",k = 0)\nplot(diff(log(AirPassengers)))\n\n# plot acf\nacf(diff(log(AirPassengers)))\npacf(diff(log(AirPassengers)))\n\nfit <- arima(log(AirPassengers),c(0,1,1),seasonal = list(order=c(0,1,1),period=12))\nfit\npred <- predict(fit,n.ahead = 10*12)\npred\nts.plot(AirPassengers,2.718^pred$pred, log = \"y\", lty = c(1,3))\n\nap.out <- AirPassengers\nrange(ap.out)\nlength(ap.out)\nap.out[100] <- 1800;ap.out[141] <- 1000\nplot(ap.out)\nfit.out <- arima(log(ap.out),c(0,1,1),\n             seasonal = list(order=c(0,1,1),period=12))\ndetectAO(fit.out)\ndetectIO(fit.out)\nap.out\n\n\n######################################################################\n\nunemp <- read.table(\"Maine.dat\", header = T)\nclass(unemp)\nunemp.ts <- ts(unemp$unemploy,start = c(1996,1),frequency = 12)\nunemp.ts\n\nplot(unemp.ts)\nplot(diff(diff(log(unemp.ts))))\nplot(aggregate(unemp.ts))\n\nacf(diff(unemp.ts))\npacf(diff(unemp.ts))\n\nfit.maine <- arima(unemp.ts,c(0,1,1),seasonal = list(order=c(0,1,1),period=12))\nfit.maine\n\npred <- predict(fit.maine,n.ahead = 10*12)\npred\nts.plot(unemp.ts,pred$pred)\n\n#########################################################################\n\ncbe <- read.table(\"cbe.dat\", header = T)\ncbe.ts <- ts(cbe,start = 1958,freq=12)\nplot(cbe.ts)\n\n\nelec.ts <- ts(cbe$elec,start = 1958,freq = 12)\nbeer.ts <- ts(cbe$beer,start = 1958,freq = 12)\n\nplot(elec.ts)\nplot(beer.ts)\n\nplot(diff(log(elec.ts)))\nacf(diff(log(elec.ts)))\npacf(diff(log(elec.ts)))\n\nfit.elec <- arima(log(elec.ts),c(0,1,1),seasonal = list(order=c(0,1,1),freq=12))\npred.elec <- predict(fit.elec,n.ahead = 5*12)\nts.plot(elec.ts,2.718^pred.elec$pred,log='y',lty=c(1,3))\n\n\nplot(diff(log(beer.ts)))\n#plot(aggregate(diff(beer.ts)))\nacf(diff(beer.ts))\n\nfit.beer <- arima(log(beer.ts),c(0,1,1),seasonal = list(order=c(0,1,1),freq=12))\npred.beer <- predict(fit.beer,n.ahead = 5*12)\nts.plot(beer.ts,2.718^pred.beer$pred,log='y',lty=c(1,3))\n\ndet <- detectIO(fit.beer)\ndet$ind\nbeer.ts[293]\nmean(beer.ts)\n### missing val\nset.seed(1)\nlength(beer.ts)\nindx <- sample(length(beer.ts),0.05*length(beer.ts))\nindx.val <- beer.ts[indx]\nbeer.ts[indx] <- NA\n\ntable(is.na(beer.ts))\nlibrary(imputeTS)\nplotNA.distribution(beer.ts)\nstatsNA(beer.ts)\npar(mfrow=c(3,1))\nplot(na.interpolation(beer.ts,option = 'spline'))\nplot(na.interpolation(beer.ts,option = 'stine'))\nplot(na.interpolation(beer.ts,option = 'linear'))\n\nplot(na.kalman(beer.ts,model = 'StructTS'))\nplot(na.kalman(beer.ts,model = 'auto.arima'))\nplot(beer.ts)\n\nsqrt(mean((na.kalman(beer.ts,model = 'StructTS')[indx]-indx.val)^2))\nsqrt(mean((na.kalman(beer.ts,model = 'auto.arima')[indx]-indx.val)^2))\nsqrt(mean((na.interpolation(beer.ts,option = 'linear')[indx]-indx.val)^2))\nsqrt(mean((na.interpolation(beer.ts,option = 'spline')[indx]-indx.val)^2))\nsqrt(mean((na.interpolation(beer.ts,option = 'stine')[indx]-indx.val)^2))\n\nbeer.ts.final <- na.kalman(beer.ts,model = 'StructTS')\n####\nplot(beer.ts.final)\npar(mfrow=c(1,1))\n\nlibrary(tseries)\nadf.test(beer.ts.final,alternative = 'stationary',k=0)\nplot(diff(log(beer.ts.final)))\n\nacf(diff(log(beer.ts.final)))\npacf(diff(log(beer.ts.final)))\n\nfit <- arima(log(beer.ts.final),c(0,1,1),seasonal = list(order=c(0,0,1),freq=12))\nfit\npred <- predict(fit,n.ahead = 5*12)\nts.plot(beer.ts.final,2.718^pred$pred,log='y',lty=c(1,3))\n\n##########################################################################\n\nex <- read.table(\"pounds_nz.dat\", header = T)\n\nex.ts <- ts(ex$xrate,start = 1991, frequency = 4)\nplot(ex.ts)\nplot(diff(ex.ts))\n\nex.92.96 <- window(ex.ts,start=c(1992,1),end=c(1996,1))\nplot(ex.92.96)\n\n\n#############\n\nts_analysis <- function(data) {\n  #is it timeseries data?\n  ifelse(class(data)=='ts',data.ts <- data,data.ts <- ts(data))\n\n  #plot the data\n  plot(data.ts)\n\n  #missing data check\n  if (length(is.na(data.ts)==T)==0){}\n    else{\n      plotNA.distribution(data.ts)\n      statsNA(data.ts)\n\n      cat(\"There is missing data. Select a method to impute\\n\n          1.linear\n          2.spline\n          3.stine\n          4.kalman filter\")\n\n      resp <- readLines(con=stdin(),1)\n      ifelse(resp==1,data.ts.imputed <- na.interpolation(data.ts,option = 'linear'),\n             ifelse(resp==2,data.ts.imputed <- na.interpolation(data.ts,option = 'spline'),\n                    ifelse(resp==3,data.ts.imputed <- na.interpolation(data.ts,option = 'stine'),\n                           data.ts.imputed <- na.kalman(data.ts))))\n\n    }\n  #plot entire data\n  plot(data.ts.imputed,main=\"Data after imputing NAs\")\n\n}\n\n#########\nts_analysis(beer.ts)\n\nclass(beer.ts)\n\ndata.ts <- beer.ts\n\nifelse(resp==1,data.ts.lin <- na.interpolation(data.ts,option = 'linear'))\n",
    "created" : 1493184630459.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3068801697",
    "id" : "50978173",
    "lastKnownWriteTime" : 1493722022,
    "last_content_update" : 1493722022211,
    "path" : "C:/Users/Abzooba/Downloads/time-series/timeseries.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}